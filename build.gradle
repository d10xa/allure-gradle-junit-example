apply plugin: 'java'
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
version = '1.0-SNAPSHOT'
defaultTasks 'clean', 'test'

repositories {
    mavenCentral()
}

configurations {
    agent
    allurebuildscript
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/classpath.txt").text = configurations
                .getByName('allurebuildscript')
                .files.collect {it.absolutePath}
                .join(String.format("%n"))//sourceSets.main.runtimeClasspath.join("\n")
    }
}


dependencies {
    agent "org.aspectj:aspectjweaver:${aspectjVersion}"
    testCompile "ru.yandex.qatools.allure:allure-junit-adaptor:${allureVersion}"
    compile "ru.yandex.qatools.allure:allure-java-adaptor-api:${allureVersion}"
    compile "ru.yandex.qatools.allure:allure-core:${allureVersion}"
    compile "ru.yandex.qatools.allure:allure-bundle:${allureVersion}"

    allurebuildscript "ru.yandex.qatools.allure:allure-java-adaptor-api:${allureVersion}"
    allurebuildscript "ru.yandex.qatools.allure:allure-core:${allureVersion}"
    allurebuildscript "ru.yandex.qatools.allure:allure-bundle:${allureVersion}"
    testRuntime files(createClasspathManifest)
}

test {
    useJUnit()
}

test.doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
}

def listener = new AllureTestListener([file(sourceSets.test.output.classesDir)])

test {
//    addTestOutputListener()

    addTestListener(listener)
}

task x << {
    println sourceSets.test.output.classesDir
}